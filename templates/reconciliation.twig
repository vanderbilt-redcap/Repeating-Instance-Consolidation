{% extends "base.twig" %}

{% if title %}
	{% block title %}{{ title }}{% endblock %}
{% endif %}

{% block content %}
<form method='POST'>
	<table class='table-bordered wdgmctable'>
		<thead>
			<tr>
				<th rowspan='2' class="bordercol">
					<h4 id="recordDisplay">{{ displayName }}</h4>
					Form/Instance<br />
					<a target="_blank" href="{{ logUrl }}">record log history</a> <br /><br />
					<div style="font-weight:normal">* <b>bold</b> indicates already reconciled data</div>
				</th>
			{% for col,fieldName in fieldList %}
			    <th class="bordercol hdrnum m{{ col }} hdrback" colspan="{{ fieldDetails[col]|length }}">
			        {{ fieldName }}
			    </th>
			{% endfor %}
				<th class="bordercol"></th>
            </tr>
            <tr class="initrow">
                {% for col,fieldName in fieldList %}
                    {% for checkLabel in fieldDetails[col] %}
                        <td class="head bordercol ca ca_{{ col }}">
                            <div class="thead"></div>
                            <div class="ca_val">{{ checkLabel }}</div>
                        </td>
                    {% endfor %}
                {% endfor %}
				<td class="head bordercol ca leftBorder">
					<div class="thead"></div>
					<div class="ca_val">Accept Test</div>
				</td>
				{% if notesField %}
				<td class="head bordercol ca leftBorder">
					<div class="thead"></div>
					<div class="ca_val">Notes</div>
				</td>
				{% endif %}
            </tr>
			<tr class="toprow">
				<td class="firstcol bordercol">Unacceptable List</td>
				{% for fieldName,fieldData in unacceptableList %}
					{% if fieldData is not iterable %}
						<td class="bordercol"></td>
					{% else %}
						{% for rawValue,isChecked in fieldData %}
							<td class="bordercol ca">
								<div class="{{ isChecked == 1 ? "x" : "o" }}" onclick="toggleUnacceptable($(this))">
									<input type="hidden" name="unacceptable-{{ fieldName }}-{{ rawValue }}" />
								</div>
							</td>
						{% endfor %}
					{% endif %}
				{% endfor %}
				<td class="bordercol"></td>
				{% if notesField %}
					<td class="bordercol"></td>
				{% endif %}
			</tr>
		</thead>
		<tbody>
		{% for row,rowDetails in outputData %}
			{% if rowDetails['type'] == 'input' %}
				<tr z-index="10" class="input tableRow{{ rowDetails["start-hidden"] ? " start-hidden hidden" : "" }} matched_{{ rowDetails["matched-value"] }}">
			{% else %}
				<tr z-index="0" class="output tableRow matched_{{ rowDetails["matched-value"] }}">
			{% endif %}

			{% if rowDetails["reconciled"] %}
				{% if rowDetails["start-hidden"] %}
					<td class="firstcol bordercol" style="padding-left:20px">
						<b>-{{ rowDetails["form"] }} Instance {{ rowDetails["instance"] }}: {{ rowDetails["matched-string"] }}</b>
					</td>
				{% else %}
					<td class="firstcol bordercol bordertop">
						<b>{{ rowDetails["form"] }} Instance {{ rowDetails["instance"] }}: {{ rowDetails["matched-string"] }}</b>
						<button onclick="toggleHiddenRows('matched_{{ rowDetails["matched-value"] }}',$(this));return false;">+</button>
					</td>
				{% endif %}
			{% elseif rowDetails["type"] == "pre-match" %}
				<td class="firstcol bordercol bordertop">
					<b>{{ rowDetails["form"] }} UNRECONCILED : {{ rowDetails["matched-string"] }}</b>
				</td>
			{% elseif rowDetails["type"] == "unreconciled" %}
				<td class="firstcol bordercol bordertop">
					<b>{{ rowDetails["form"] }} UNRECONCILED - MODIFIED: {{ rowDetails["matched-string"] }}</b>
				</td>
			{% else %}
				<td class="firstcol bordercol">
					<a target="_blank" href="{{ constant("APP_PATH_WEBROOT") }}DataEntry/index.php?pid={{ rowDetails["pid"] }}&page={{ rowDetails["form_full"] }}&id={{ rowDetails["record"] }}&event_id={{ rowDetails["event"] }}&instance={{ rowDetails["instance"] }}">
						{{ rowDetails["form"] }} Instance {{ rowDetails["instance"] }}: {{ rowDetails["matched-string"] }}
					</a>
				</td>
			{% endif %}
			{% for fieldName,fieldData in rowDetails["data"] %}
				{% if fieldData['issue'] is defined %}
					{% if rowDetails['type'] == 'pre-match' or rowDetails["type"] == "unreconciled" or (rowDetails["reconciled"] and not rowDetails["start-hidden"]) %}
						<td class="{{ loop.index == 1 ? 'startField' : ''}} bordercol bordertop ca ca_{{ fieldName }} {{ fieldData["issue"] ? "bgred" : "" }} {{ (rowDetails['type'] == "pre-match" and fieldData["issue"]) ? " pre-match" : "" }}">
							<div class="match_{{ rowDetails["matched-value"] }}" style="text-align: center">
								<input type="text" name="{{ rowDetails["matched-value"] }}|{{ fieldName }}" {%  if fieldData['value'] is empty %} placeholder="0"{% else %} value="{{ fieldData['value']}}" {% endif %}/> %
							</div>
						</td>
					{% else %}
						<td class="{{ loop.index == 1 ? 'startField' : ''}} bordercol ca ca_{{ fieldName }}">
							<div class=" match_{{ rowDetails["matched-value"] }}">
								{{ fieldData['value'] is empty ? 'N/A' : fieldData['value']~'%' }}
							</div>
						</td>
					{% endif %}
				{% else %}
					{% for rawValue,rawData in fieldData %}

						{% if rowDetails['type'] == 'pre-match' or rowDetails["type"] == "unreconciled" or (rowDetails["reconciled"] and not rowDetails["start-hidden"]) %}
							<td class="{{ loop.index == 1 ? 'startField' : ''}} bordercol bordertop ca ca_{{ rawValue }}{{ fieldName }}{{ rawData["issue"] ? " bgred" : "" }}{{ (rowDetails['type'] == "pre-match" and rawData["issue"]) ? " changed pre-match" : "" }}{{ rawData["unmatched"] ? " bggreen" : "" }}">
								<div class="{{ rawData["value"] ? "x" : "o" }} match_{{ rowDetails["matched-value"] }}" onclick="toggleAntigen($(this),'.match_{{ rowDetails["matched-value"] }}','.ca_{{ rawValue }}{{ fieldName }}','{{ rawData["issue"] }}');">
									<input type="hidden" name="{{ rowDetails["matched-value"] }}|{{ fieldName }}|{{ rawValue }}[]" value="{{ rawData["issue"] ? 1 : 0 }}"/>
								</div>
							</td>
						{% else %}
							<td class="{{ loop.index == 1 ? 'startField' : ''}} bordercol ca ca_{{ rawValue }}{{ fieldName }}{{ rawData["issue"] ? " bgred" : "" }}{{ rawData["unmatched"] ? " bggreen" : "" }}">
								<div class="{{ rawData["value"] ? "x" : "o" }} match_{{ rowDetails["matched-value"] }}">
								</div>
							</td>
						{% endif %}
					{% endfor %}
				{% endif %}
			{% endfor %}
			{% if rowDetails['type'] == 'pre-match' or rowDetails["type"] == "unreconciled" %}
				<td class="bordercol bordertop">
					<input type="checkbox" onclick="acceptAction($(this));"
						   class="accept_{{ rowDetails["matched-value"] }}"
						   name="accept_{{ rowDetails["matched-value"] }}"
						   value="{{ rowDetails["matched-value"] }}"/>
				</td>
			{% elseif rowDetails["reconciled"] and not rowDetails["start-hidden"]  %}
				<td class="bordercol bordertop"></td>
			{% else %}
				<td class="bordercol"></td>
			{% endif %}
			{% if notesField and rowDetails['type'] == 'reconciled' %}
				<td class="notesCell">
					<div class="match_{{ rowDetails["matched-value"] }}" style="max-height: 35px">
						<textarea name="{{ rowDetails["matched-value"] }}|{{ notesField }}" style="height: 33px">{{ rowDetails.notes }}</textarea>
					</div>
				</td>
			{% elseif notesField and (rowDetails['type'] == 'unreconciled' or rowDetails["type"] == "pre-match") %}
				<td class="notesCell" rowspan="3">
					<div class="match_{{ rowDetails["matched-value"] }}" style="max-height: 105px">
						<textarea name="{{ rowDetails["matched-value"] }}|{{ notesField }}" style="height: 105px">{{ rowDetails.notes }}</textarea>
					</div>
				</td>
			{% elseif notesField %}
				<td class="bordercol" style="display: none"></td>
			{% endif %}
			</tr>
		{% endfor %}
		</tbody>
		<tfoot>
		</tfoot>
	</table>
	<div id="buttonWrapper" style="margin-left:10px">
		<input type='submit' value='Save Reconciliation' />
		<button type="button" style="margin-left:20px" onclick="window.location='{{ reportUrl }}';return false;">Return to Report</button>
	</div>
</form>

<script type="text/javascript">
	$(document).ready(function() {
		var unmatchedRows = $(".bgred").parent();

		unmatchedRows.addClass("bgred");
		// unmatchedRows.find("input[type='checkbox']").hide();

		$(".bggreen").parent().addClass("bggreen");

		$(".hdrnum").each(function( index, element ){
			if(index%2 == 0){
				$(this).addClass("todd");
			}
			$(this).addClass("hdrback");
			$(this).css("padding-left","10px");
			$(this).css("padding-right","10px");
			//$(this).before("<div class='hdrback "+addtclass+"' style='position:absolute; left:" + (offset.left) + "px; top:0px; height:"+$(".wdgmctable").height()+"px; width:"+$(this).width()+"px; z-index: -1;'></div>");
		});

		let recordDisplayBox = document.getElementById('recordDisplay');
		let heightOffset = 232 + recordDisplayBox.offsetHeight + (recordDisplayBox.offsetHeight/1.5); // Hacky way to make sure the record name won't shove the buttons off screen or into the scrollbar. Works for up to 4 or 5 lines of record name
		$('#buttonWrapper').css('margin-top', recordDisplayBox.offsetHeight);
		$(".wdgmctable").DataTable({
			fixedColumns: {
				leftColumns: 1
			},
			fixedHeader: true,
			scrollX: true,
			scrollY: window.innerHeight - heightOffset, //TODO 260 can change if record name is too long
			fixedFooter: true,
			paging:   false,
			ordering: false,
			info:     false,
			searching:  false,
			orderClasses: false
		});

		$("tr.odd").removeClass("odd");
		$("tr.even").removeClass("even");

		$('.dataTables_scrollBody thead tr').css({visibility:'collapse'});
	});

	function toggleAntigen(clickedCell,matchingClass,columnClass,hasIssue) {
		let curClass = false;
		let curChange = false;
		if(clickedCell.hasClass("x")) {
			curClass = true;
		}
		if(clickedCell.parent().hasClass("changed") && hasIssue == "") {
			curChange = true;
		}

		if (clickedCell.parent().hasClass("pre-match")) {
			clickedCell.parent().removeClass("pre-match");
		}
		// $(columnClass).each(function() {
		// 	let matchedCell = $(this).find(matchingClass);

		if(clickedCell.length > 0) {
			if(curClass) {
				clickedCell.removeClass("x");
				clickedCell.addClass("o");
				clickedCell.find("input").val("0");
			}
			else {
				clickedCell.removeClass("o");
				clickedCell.addClass("x");
				clickedCell.find("input").val("1");
			}

			if(curChange) {
				clickedCell.parent().removeClass("changed");
				$(columnClass).find(matchingClass).parent().removeClass("changed");
			}
			else {
				clickedCell.parent().addClass("changed");
				$(columnClass).find(matchingClass).parent().addClass("changed");
			}
		}
		// });
	}

	$('input[type="text"]').change(function () {
		let clickedCell = $(this).parent();
		let matchingClass = clickedCell.prop('class');
		let columnClass = '';
		let curChange = false;
		if(clickedCell.parent().hasClass("changed")) {
			curChange = true;
		}

		if (clickedCell.parent().hasClass("pre-match")) {
			clickedCell.parent().removeClass("pre-match");

		}
		// $(columnClass).each(function() {
		// 	let matchedCell = $(this).find(matchingClass);

		if(curChange) {
			console.log(clickedCell.parent());
			clickedCell.parent().removeClass("changed");
			$(columnClass).find(matchingClass).parent().removeClass("changed");
		}
		else {
			console.log(clickedCell.parent());
			clickedCell.parent().addClass("changed");
			$(columnClass).find(matchingClass).parent().addClass("changed");
		}
	});
	$('textarea').change(function () {
		let clickedCell = $(this).parent();
		let matchingClass = clickedCell.prop('class');
		let columnClass = '';
		let curChange = false;
		if(clickedCell.parent().hasClass("changed")) {
			curChange = true;
		}

		if (clickedCell.parent().hasClass("pre-match")) {
			clickedCell.parent().removeClass("pre-match");

		}
		// $(columnClass).each(function() {
		// 	let matchedCell = $(this).find(matchingClass);

		if(curChange) {
			console.log(clickedCell.parent());
			clickedCell.parent().removeClass("changed");
			$(columnClass).find(matchingClass).parent().removeClass("changed");
		}
		else {
			console.log(clickedCell.parent());
			clickedCell.parent().addClass("changed");
			$(columnClass).find(matchingClass).parent().addClass("changed");
		}
	});

	function toggleUnacceptable(clickedCell) {
		let curClass = false;
		let curChange = false;
		if(clickedCell.hasClass("x")) {
			curClass = true;
		}

		if(clickedCell.parent().hasClass("changed")) {
			curChange = true;
		}

		if(curClass) {
			clickedCell.removeClass("x");
			clickedCell.addClass("o");
			clickedCell.find("input").val("0");
		}
		else {
			clickedCell.removeClass("o");
			clickedCell.addClass("x");
			clickedCell.find("input").val("1");
		}

		if(curChange) {
			clickedCell.parent().removeClass("changed");
		}
		else {
			clickedCell.parent().addClass("changed");
		}
	}

	function toggleHiddenRows(matchedClass,button) {
		var rowsToToggle = $("."+ matchedClass + ".start-hidden");
		var notesSection = $('.'+matchedClass).find('.notesCell');
		var notesDiv = notesSection.find('div');
		var notesTA = notesSection.find('textarea');
		if(rowsToToggle.hasClass("hidden")) {
			rowsToToggle.removeClass("hidden");
			notesSection.prop('rowspan', 3);
			notesDiv.css('max-height', '105px');
			notesTA.css('height', '105px');
			button.html("-");
		}
		else {
			rowsToToggle.addClass("hidden");
			notesSection.prop('rowspan', 1);
			notesDiv.css('max-height', '35px');
			notesTA.css('height', '33px');
			button.html("+");
		}
	}

	function acceptAction(checkedBox, matchedValue) {
		let curChange = false;
		if(checkedBox.parent().hasClass("changed")) {
			curChange = true;
		}
		if(curChange) {
			checkedBox.parent().removeClass("changed");
		}
		else {
			checkedBox.parent().addClass("changed");
		}
	}

	$('form').submit(function () {
		$(this).find('td:not(.changed)').find('input').remove();
		$(this).find('td:not(.changed)').find('textarea').remove();
	});
</script>
{% endblock %}
